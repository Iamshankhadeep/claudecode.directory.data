name: üèóÔ∏è Build and Deploy JSON API

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'data/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'data/**'
      - 'scripts/**'
  workflow_dispatch: # Allow manual trigger

jobs:
  build-api:
    name: üöÄ Generate JSON API from TypeScript Data
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # Needed to push back to repo
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Full history for better commit messages
          
      - name: üì¶ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: üîç Install dependencies
        run: |
          # Install dependencies if needed
          if [ -f "package.json" ]; then
            bun install
          fi
          
      - name: üèóÔ∏è Build JSON API
        run: |
          echo "üèóÔ∏è Building API from data files..."
          bun run scripts/build-api.js
          
      - name: üìä Verify build output
        run: |
          echo "üìÅ Generated API structure:"
          find api -type f -name "*.json" | head -20
          echo ""
          echo "üìà API Statistics:"
          if [ -f api/manifest.json ]; then
            echo "‚úÖ Manifest created"
            cat api/manifest.json | head -20
          else
            echo "‚ùå No manifest found"
          fi
          
      - name: üîç Check for API changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain api/)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "üìù API files have changes"
            git status --porcelain api/
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No API changes detected"
          fi
          
      - name: üìù Commit and push API changes
        if: steps.changes.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get the commit that triggered this workflow
          TRIGGER_COMMIT=$(git rev-parse HEAD)
          TRIGGER_MESSAGE=$(git log -1 --pretty=format:"%s" $TRIGGER_COMMIT)
          
          # Add API changes
          git add api/
          
          # Create descriptive commit message
          cat > commit_message.txt << EOF
          ü§ñ Auto-update JSON API from data changes
          
          Generated from commit: $TRIGGER_COMMIT
          Original message: $TRIGGER_MESSAGE
          
          üìä Updated API endpoints:
          $(git diff --cached --name-only api/ | sed 's/^/  - /')
          
          üïí Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          # Commit the changes
          git commit -F commit_message.txt
          
          # Push changes
          git push
          
          echo "‚úÖ API changes committed and pushed successfully!"
          
      - name: üìã Summary
        if: always()
        run: |
          echo "## üéâ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f api/manifest.json ]; then
            echo "‚úÖ **Status:** API built successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìä Generated Resources" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat api/manifest.json | jq -r '.stats' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Available Endpoints" >> $GITHUB_STEP_SUMMARY
            echo "- üìö Categories: \`/api/v1/categories.json\`" >> $GITHUB_STEP_SUMMARY
            echo "- üéØ All Resources: \`/api/v1/resources/index.json\`" >> $GITHUB_STEP_SUMMARY  
            echo "- ‚≠ê Featured: \`/api/v1/resources/featured.json\`" >> $GITHUB_STEP_SUMMARY
            echo "- üìà Stats: \`/api/v1/stats.json\`" >> $GITHUB_STEP_SUMMARY
            echo "- üîç Search Index: \`/api/v1/search/index.json\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** API build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let manifestData = {};
            try {
              manifestData = JSON.parse(fs.readFileSync('api/manifest.json', 'utf8'));
            } catch (e) {
              console.log('Could not read manifest:', e.message);
            }
            
            const comment = `## ü§ñ API Build Results
            
            ‚úÖ **JSON API successfully generated from your data changes!**
            
            ### üìä Statistics
            - **Total Resources:** ${manifestData.stats?.total_resources || 'N/A'}
            - **Categories:** ${manifestData.stats?.total_categories || 'N/A'}
            - **Contributors:** ${manifestData.stats?.total_contributors || 'N/A'}
            - **Generated:** ${manifestData.generated_at || 'N/A'}
            
            ### üîó Preview URLs (after merge)
            - [üìö Categories](https://raw.githubusercontent.com/${{ github.repository }}/main/api/v1/categories.json)
            - [üéØ All Resources](https://raw.githubusercontent.com/${{ github.repository }}/main/api/v1/resources/index.json)
            - [‚≠ê Featured Resources](https://raw.githubusercontent.com/${{ github.repository }}/main/api/v1/resources/featured.json)
            
            The API will be automatically updated when this PR is merged! üöÄ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
  validate-api:
    name: üîç Validate Generated API
    needs: build-api  
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: üîç Validate JSON files
        run: |
          echo "üîç Validating generated JSON files..."
          
          JSON_FILES=$(find api -name "*.json" -type f)
          VALID_COUNT=0
          TOTAL_COUNT=0
          
          for file in $JSON_FILES; do
            echo "Checking $file..."
            if jq empty "$file" 2>/dev/null; then
              echo "  ‚úÖ Valid JSON"
              VALID_COUNT=$((VALID_COUNT + 1))
            else
              echo "  ‚ùå Invalid JSON"
            fi
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
          done
          
          echo ""
          echo "üìä Validation Summary:"
          echo "  Valid: $VALID_COUNT/$TOTAL_COUNT JSON files"
          
          if [ "$VALID_COUNT" -eq "$TOTAL_COUNT" ]; then
            echo "‚úÖ All JSON files are valid!"
          else
            echo "‚ùå Some JSON files are invalid!"
            exit 1
          fi
          
      - name: üîó Test API endpoints
        run: |
          echo "üîó Testing key API endpoints..."
          
          # Test manifest
          if [ -f api/manifest.json ]; then
            echo "‚úÖ Manifest exists"
            jq -r '.endpoints | keys[]' api/manifest.json | head -5
          else
            echo "‚ùå Manifest missing"
            exit 1
          fi
          
          # Test categories
          if [ -f api/v1/categories.json ]; then
            CATEGORY_COUNT=$(jq '.categories | length' api/v1/categories.json)
            echo "‚úÖ Categories: $CATEGORY_COUNT items"
          else
            echo "‚ùå Categories missing"
            exit 1
          fi
          
          # Test resources
          if [ -f api/v1/resources/index.json ]; then
            RESOURCE_COUNT=$(jq '.resources | length' api/v1/resources/index.json)
            echo "‚úÖ Resources: $RESOURCE_COUNT items"
          else
            echo "‚ùå Resources missing"
            exit 1
          fi
          
          echo "üéâ API validation completed successfully!"