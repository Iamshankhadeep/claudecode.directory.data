{
  "resources": [
    {
      "id": "api-design-architect",
      "title": "API Design & Architecture Prompt",
      "slug": "api-design-architect",
      "tagline": "Expert backend development prompt template",
      "description": "Comprehensive prompt for designing REST APIs with proper architecture, documentation, and best practices.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are an expert API architect and backend developer. Design a comprehensive REST API for the given requirements.\n\n## Context\n**Project:** {{PROJECT_NAME}}\n**Domain:** {{DOMAIN}}\n**Scale:** {{EXPECTED_SCALE}}\n**Technology Stack:** {{TECH_STACK}}\n\n## Requirements\n{{REQUIREMENTS}}\n\n## Design the API with the following considerations:\n\n### 1. Resource Modeling\n- Identify the core entities and their relationships\n- Define resource hierarchies and nested resources\n- Consider data consistency patterns\n\n### 2. Endpoint Design\n- Follow RESTful conventions (GET, POST, PUT, DELETE, PATCH)\n- Design proper URL structures (/api/v1/resources/{id})\n- Plan for versioning strategy\n- Include filtering, sorting, and pagination patterns\n\n### 3. Request/Response Schema\n- Define comprehensive data models\n- Include validation rules and constraints\n- Plan for extensibility and backward compatibility\n- Consider data transformation needs\n\n### 4. Authentication & Authorization\n- Choose appropriate auth strategy (JWT, OAuth2, API Keys)\n- Design permission models and role-based access\n- Plan for rate limiting and API quotas\n- Consider security headers and CORS policies\n\n### 5. Error Handling\n- Design consistent error response format\n- Define HTTP status code usage\n- Plan for validation error details\n- Include error logging and monitoring strategy\n\n### 6. Performance & Scalability\n- Design for caching opportunities\n- Plan database query optimization\n- Consider API response time requirements\n- Design for horizontal scaling\n\n### 7. Documentation & Testing\n- Generate OpenAPI/Swagger specification\n- Include example requests/responses\n- Plan for API testing strategy\n- Consider developer experience (DX)\n\n## Output Format:\nProvide a detailed API specification including:\n1. **Overview & Architecture**\n2. **Resource Models** (with relationships)\n3. **Endpoint Specifications** (detailed)\n4. **Authentication Strategy**\n5. **Error Handling Patterns**\n6. **Performance Considerations**\n7. **OpenAPI Schema Sample**\n8. **Implementation Roadmap**\n\nUse clear examples and consider edge cases throughout the design.",
      "tags": [
        {
          "tag": {
            "id": "api-design",
            "name": "api-design",
            "slug": "api-design"
          }
        },
        {
          "tag": {
            "id": "rest",
            "name": "rest",
            "slug": "rest"
          }
        },
        {
          "tag": {
            "id": "architecture",
            "name": "architecture",
            "slug": "architecture"
          }
        },
        {
          "tag": {
            "id": "documentation",
            "name": "documentation",
            "slug": "documentation"
          }
        },
        {
          "tag": {
            "id": "backend",
            "name": "backend",
            "slug": "backend"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 57,
        "copies": 144
      },
      "_count": {
        "votes": 94,
        "copies": 323
      },
      "difficulty": "INTERMEDIATE",
      "lastUpdated": "2024-12-01",
      "featured": false
    },
    {
      "id": "database-schema-designer",
      "title": "Database Schema Design Prompt",
      "slug": "database-schema-designer",
      "tagline": "Expert database design prompt template",
      "description": "Expert-level prompt for designing optimized database schemas with proper relationships, indexing, and normalization.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are a senior database architect with expertise in relational database design, normalization, and performance optimization.\n\n## Context\n**Application:** {{APPLICATION_TYPE}}\n**Database:** {{DATABASE_TYPE}}\n**Expected Data Volume:** {{DATA_VOLUME}}\n**Query Patterns:** {{QUERY_PATTERNS}}\n**Performance Requirements:** {{PERFORMANCE_REQUIREMENTS}}\n\n## Business Requirements\n{{BUSINESS_REQUIREMENTS}}\n\n## Design a comprehensive database schema with the following considerations:\n\n### 1. Entity Identification & Modeling\n- Identify all entities from business requirements\n- Define entity attributes and data types\n- Establish entity relationships (1:1, 1:M, M:M)\n- Apply appropriate normalization (up to 3NF typically)\n\n### 2. Schema Design\n- Create detailed table structures\n- Define primary keys and foreign keys\n- Implement appropriate constraints (NOT NULL, UNIQUE, CHECK)\n- Design lookup tables and reference data\n- Plan for data integrity and referential constraints\n\n### 3. Relationship Design\n- Design junction tables for many-to-many relationships\n- Implement proper cascading rules (CASCADE, SET NULL, RESTRICT)\n- Handle hierarchical data (adjacency list, nested sets, etc.)\n- Design for soft deletes where appropriate\n\n### 4. Indexing Strategy\n- Identify query patterns and access paths\n- Design primary and secondary indexes\n- Plan composite indexes for multi-column queries\n- Consider partial indexes for filtered queries\n- Balance query performance vs. write performance\n\n### 5. Performance Optimization\n- Design for expected query patterns\n- Plan partitioning strategy for large tables\n- Consider denormalization for read-heavy scenarios\n- Design materialized views for complex aggregations\n- Plan for archival and data lifecycle management\n\n### 6. Data Types & Constraints\n- Choose optimal data types for storage efficiency\n- Implement business rule constraints at database level\n- Design for internationalization (UTF-8, collations)\n- Handle temporal data (timestamps, time zones)\n- Plan for JSON/document storage if needed\n\n### 7. Security & Compliance\n- Design role-based access control\n- Plan for data encryption (at rest/in transit)\n- Implement audit trails and change tracking\n- Consider data privacy and GDPR compliance\n- Design for secure backup and recovery\n\n## Output Format:\nProvide a complete database design including:\n\n**Entity Relationship Diagram (textual):**\n```\n[Entity1] --< [Junction] >-- [Entity2]\n[Parent] ||--o{ [Child]\n```\n\n**Schema Definition:**\n```sql\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**Index Strategy:**\n```sql\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_orders_user_date ON orders(user_id, created_at);\n```\n\nInclude migration scripts, sample queries, and performance considerations.",
      "tags": [
        {
          "tag": {
            "id": "database",
            "name": "database",
            "slug": "database"
          }
        },
        {
          "tag": {
            "id": "schema",
            "name": "schema",
            "slug": "schema"
          }
        },
        {
          "tag": {
            "id": "sql",
            "name": "sql",
            "slug": "sql"
          }
        },
        {
          "tag": {
            "id": "normalization",
            "name": "normalization",
            "slug": "normalization"
          }
        },
        {
          "tag": {
            "id": "optimization",
            "name": "optimization",
            "slug": "optimization"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 25,
        "copies": 244
      },
      "_count": {
        "votes": 79,
        "copies": 301
      },
      "difficulty": "ADVANCED",
      "lastUpdated": "2024-12-01",
      "featured": false
    },
    {
      "id": "frontend-architecture-planner",
      "title": "Frontend Architecture & Component Design",
      "slug": "frontend-architecture-planner",
      "tagline": "Expert frontend development prompt template",
      "description": "Comprehensive prompt for designing scalable frontend architectures with component systems and state management.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are a senior frontend architect specializing in modern web applications, component systems, and scalable frontend architectures.\n\n## Project Context\n**Application Type:** {{APPLICATION_TYPE}}\n**Framework:** {{FRAMEWORK}}\n**Complexity:** {{COMPLEXITY_LEVEL}}\n**Team Size:** {{TEAM_SIZE}}\n**Timeline:** {{TIMELINE}}\n\n## Requirements\n{{REQUIREMENTS}}\n\n## Design a comprehensive frontend architecture with the following considerations:\n\n### 1. Architecture Overview\n- Define overall application structure and layers\n- Choose appropriate architectural patterns (MVC, Component-based, Micro-frontends)\n- Plan for scalability and maintainability\n- Consider development team structure and workflow\n\n### 2. Component System Design\n- Design reusable component hierarchy\n- Create component categorization (Atoms, Molecules, Organisms)\n- Plan for component composition and prop interfaces\n- Design consistent component API patterns\n- Plan for component testing strategies\n\n### 3. State Management Strategy\n- Choose appropriate state management solution\n- Design global state structure\n- Plan for local component state\n- Design data flow patterns (unidirectional/bidirectional)\n- Handle asynchronous state (loading, error states)\n\n### 4. Routing & Navigation\n- Design application routing structure\n- Plan for nested routes and route parameters\n- Implement navigation guards and access control\n- Handle deep linking and browser history\n- Design for SEO and social sharing\n\n### 5. Data Layer & API Integration\n- Design API service layer and data fetching patterns\n- Plan for caching and data synchronization\n- Handle optimistic updates and conflict resolution\n- Design error handling and retry mechanisms\n- Plan for offline capabilities\n\n### 6. Performance Optimization\n- Plan for code splitting and lazy loading\n- Design bundle optimization strategy\n- Implement performance monitoring\n- Plan for image and asset optimization\n- Consider server-side rendering (SSR) needs\n\n### 7. Development Experience\n- Set up development tooling and build process\n- Plan for hot reloading and development server\n- Design component documentation system\n- Set up testing infrastructure (unit, integration, e2e)\n- Plan for code quality tools (linting, formatting)\n\n### 8. Accessibility & UX\n- Design for accessibility standards (WCAG)\n- Plan for responsive design and mobile experience\n- Design loading states and error boundaries\n- Plan for internationalization (i18n)\n- Consider user preferences and theming\n\n## Output Format:\nProvide a detailed frontend architecture including:\n\n**1. Architecture Diagram (textual):**\n```\n┌─ Presentation Layer ─┐\n│ Components & Views   │\n├─ Business Logic ─────┤\n│ Services & Stores    │\n├─ Data Layer ─────────┤\n│ API & Persistence    │\n└──────────────────────┘\n```\n\n**2. Component Structure:**\n```\nsrc/\n├── components/\n│   ├── ui/           # Base components\n│   ├── forms/        # Form components\n│   └── layout/       # Layout components\n├── pages/            # Route components\n├── services/         # API services\n├── stores/           # State management\n└── utils/            # Utilities\n```\n\n**3. State Management Design:**\n- Global state schema\n- State update patterns\n- Side effects handling\n\n**4. Component Examples:**\n- Base component interfaces\n- Composition examples\n- State integration patterns\n\n**5. Implementation Roadmap:**\n- Phase-by-phase development plan\n- Critical path identification\n- Risk mitigation strategies\n\nInclude specific code examples and consider modern best practices.",
      "tags": [
        {
          "tag": {
            "id": "frontend",
            "name": "frontend",
            "slug": "frontend"
          }
        },
        {
          "tag": {
            "id": "architecture",
            "name": "architecture",
            "slug": "architecture"
          }
        },
        {
          "tag": {
            "id": "components",
            "name": "components",
            "slug": "components"
          }
        },
        {
          "tag": {
            "id": "state-management",
            "name": "state-management",
            "slug": "state-management"
          }
        },
        {
          "tag": {
            "id": "design-system",
            "name": "design-system",
            "slug": "design-system"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 33,
        "copies": 180
      },
      "_count": {
        "votes": 38,
        "copies": 137
      },
      "difficulty": "INTERMEDIATE",
      "lastUpdated": "2024-12-01",
      "featured": false
    },
    {
      "id": "devops-pipeline-designer",
      "title": "DevOps Pipeline & Infrastructure Design",
      "slug": "devops-pipeline-designer",
      "tagline": "Expert devops & infrastructure prompt template",
      "description": "Expert prompt for designing CI/CD pipelines, infrastructure as code, and deployment strategies.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are a senior DevOps engineer and infrastructure architect with expertise in CI/CD pipelines, cloud infrastructure, and deployment automation.\n\n## Project Context\n**Application Stack:** {{APPLICATION_STACK}}\n**Cloud Provider:** {{CLOUD_PROVIDER}}\n**Scale:** {{SCALE_REQUIREMENTS}}\n**Compliance:** {{COMPLIANCE_REQUIREMENTS}}\n**Budget:** {{BUDGET_CONSTRAINTS}}\n\n## Requirements\n{{REQUIREMENTS}}\n\n## Design a comprehensive DevOps infrastructure with the following considerations:\n\n### 1. Infrastructure Architecture\n- Design cloud infrastructure topology\n- Plan for high availability and disaster recovery\n- Choose appropriate compute, storage, and networking services\n- Design for cost optimization and resource efficiency\n- Plan for security and compliance requirements\n\n### 2. CI/CD Pipeline Design\n- Design multi-stage pipeline (build, test, deploy)\n- Plan for automated testing integration\n- Design deployment strategies (blue-green, canary, rolling)\n- Plan for rollback and recovery procedures\n- Design for multiple environments (dev, staging, prod)\n\n### 3. Infrastructure as Code (IaC)\n- Choose IaC tools (Terraform, CloudFormation, Pulumi)\n- Design modular and reusable infrastructure components\n- Plan for state management and remote backends\n- Design for infrastructure versioning and drift detection\n- Plan for infrastructure testing and validation\n\n### 4. Container Strategy\n- Design containerization strategy (Docker)\n- Plan for container orchestration (Kubernetes, ECS)\n- Design service mesh and networking\n- Plan for container security and image management\n- Design for auto-scaling and resource management\n\n### 5. Monitoring & Observability\n- Design monitoring and alerting strategy\n- Plan for application and infrastructure metrics\n- Design logging aggregation and analysis\n- Plan for distributed tracing\n- Design for performance monitoring and APM\n\n### 6. Security & Compliance\n- Design security controls and access management\n- Plan for secrets management and encryption\n- Design for vulnerability scanning and patching\n- Plan for audit logging and compliance reporting\n- Design for network security and isolation\n\n### 7. Backup & Disaster Recovery\n- Design backup strategies for data and configurations\n- Plan for disaster recovery procedures\n- Design for business continuity\n- Plan for data retention and archival\n- Design for testing and validation of recovery procedures\n\n### 8. Cost Management\n- Design for cost optimization and resource tagging\n- Plan for auto-scaling and right-sizing\n- Design for budget alerts and cost monitoring\n- Plan for reserved instances and savings plans\n- Design for resource lifecycle management\n\n## Output Format:\nProvide a comprehensive DevOps design including:\n\n**1. Infrastructure Diagram:**\n```\n┌─ Load Balancer ─┐\n│                 │\n├─ Web Tier ──────┤\n│ App Servers     │\n├─ Database ──────┤\n│ RDS/Cluster     │\n└─────────────────┘\n```\n\n**2. CI/CD Pipeline:**\n```yaml\n# Example GitHub Actions workflow\nname: CI/CD Pipeline\non:\n  push:\n    branches: [main]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      # Build and test steps\n```\n\n**3. Infrastructure Code:**\n```hcl\n# Example Terraform configuration\nresource \"aws_instance\" \"web\" {\n  ami           = var.ami_id\n  instance_type = \"t3.micro\"\n  \n  tags = {\n    Name = \"web-server\"\n  }\n}\n```\n\n**4. Monitoring Setup:**\n- Metrics and alerting configuration\n- Dashboard definitions\n- Log aggregation setup\n\n**5. Security Configuration:**\n- IAM policies and roles\n- Network security groups\n- Encryption configuration\n\n**6. Deployment Scripts:**\n- Application deployment procedures\n- Database migration scripts\n- Environment setup automation\n\n**7. Implementation Timeline:**\n- Phase-by-phase implementation plan\n- Dependencies and prerequisites\n- Testing and validation procedures\n\nInclude specific examples, best practices, and consideration for the given requirements.",
      "tags": [
        {
          "tag": {
            "id": "devops",
            "name": "devops",
            "slug": "devops"
          }
        },
        {
          "tag": {
            "id": "cicd",
            "name": "cicd",
            "slug": "cicd"
          }
        },
        {
          "tag": {
            "id": "infrastructure",
            "name": "infrastructure",
            "slug": "infrastructure"
          }
        },
        {
          "tag": {
            "id": "deployment",
            "name": "deployment",
            "slug": "deployment"
          }
        },
        {
          "tag": {
            "id": "automation",
            "name": "automation",
            "slug": "automation"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 47,
        "copies": 154
      },
      "_count": {
        "votes": 45,
        "copies": 338
      },
      "difficulty": "ADVANCED",
      "lastUpdated": "2024-12-01",
      "featured": true
    },
    {
      "id": "code-review-expert",
      "title": "Comprehensive Code Review & Analysis",
      "slug": "code-review-expert",
      "tagline": "Expert code quality prompt template",
      "description": "Expert-level prompt for conducting thorough code reviews with focus on quality, security, and best practices.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are a senior software engineer and code review expert with deep knowledge of software engineering best practices, security, and code quality.\n\n## Review Context\n**Language/Framework:** {{LANGUAGE_FRAMEWORK}}\n**Code Type:** {{CODE_TYPE}}\n**Review Scope:** {{REVIEW_SCOPE}}\n**Team Experience:** {{TEAM_EXPERIENCE}}\n**Critical Level:** {{CRITICAL_LEVEL}}\n\n## Code to Review\n```{{LANGUAGE}}\n{{CODE_CONTENT}}\n```\n\n## Conduct a comprehensive code review covering the following areas:\n\n### 1. Code Quality & Readability\n- Assess code clarity and readability\n- Review naming conventions and consistency\n- Evaluate code organization and structure\n- Check for proper commenting and documentation\n- Review function/method size and complexity\n\n### 2. Architecture & Design Patterns\n- Evaluate adherence to SOLID principles\n- Review design pattern usage and appropriateness\n- Assess separation of concerns\n- Check for proper abstraction levels\n- Review dependency management and coupling\n\n### 3. Performance & Efficiency\n- Identify potential performance bottlenecks\n- Review algorithm complexity and efficiency\n- Check for memory leaks and resource management\n- Evaluate database query optimization\n- Assess caching strategies and implementation\n\n### 4. Security Analysis\n- Check for common security vulnerabilities (OWASP Top 10)\n- Review input validation and sanitization\n- Assess authentication and authorization implementation\n- Check for SQL injection and XSS vulnerabilities\n- Review sensitive data handling and encryption\n\n### 5. Error Handling & Resilience\n- Review exception handling patterns\n- Check for proper error propagation\n- Assess logging and monitoring implementation\n- Review timeout and retry mechanisms\n- Check for graceful failure handling\n\n### 6. Testing & Testability\n- Assess testability of the code\n- Review test coverage and quality\n- Check for proper mocking and stubbing\n- Evaluate test organization and structure\n- Review integration and end-to-end test coverage\n\n### 7. Maintainability & Technical Debt\n- Identify code smells and anti-patterns\n- Assess code duplication and DRY principle adherence\n- Review configuration management\n- Check for proper versioning and backward compatibility\n- Evaluate refactoring opportunities\n\n### 8. Language/Framework Specific\n- Review language-specific best practices\n- Check for proper framework usage\n- Assess library and dependency choices\n- Review configuration and setup\n- Check for platform-specific considerations\n\n## Output Format:\nProvide a detailed code review with:\n\n**Overall Assessment:**\n- High-level summary of code quality\n- Key strengths and areas for improvement\n- Risk level assessment\n\n**Detailed Findings:**\n\n**🔴 Critical Issues** (Must fix before merge):\n- Security vulnerabilities\n- Performance blockers\n- Architectural violations\n\n**🟡 Major Issues** (Should fix soon):\n- Code quality issues\n- Maintainability concerns\n- Best practice violations\n\n**🟢 Minor Issues** (Nice to have):\n- Style improvements\n- Optimization opportunities\n- Documentation enhancements\n\n**Specific Recommendations:**\n```{{LANGUAGE}}\n// Example: Instead of this\nfunction badExample() {\n  // problematic code\n}\n\n// Consider this approach\nfunction betterExample() {\n  // improved code\n}\n```\n\n**Action Items:**\n1. Priority fixes with explanations\n2. Refactoring suggestions\n3. Additional testing recommendations\n4. Documentation updates needed\n\n**Learning Opportunities:**\n- Educational notes for team growth\n- Links to relevant resources\n- Pattern recommendations\n\nProvide constructive feedback focused on improvement and learning.",
      "tags": [
        {
          "tag": {
            "id": "code-review",
            "name": "code-review",
            "slug": "code-review"
          }
        },
        {
          "tag": {
            "id": "quality",
            "name": "quality",
            "slug": "quality"
          }
        },
        {
          "tag": {
            "id": "security",
            "name": "security",
            "slug": "security"
          }
        },
        {
          "tag": {
            "id": "best-practices",
            "name": "best-practices",
            "slug": "best-practices"
          }
        },
        {
          "tag": {
            "id": "refactoring",
            "name": "refactoring",
            "slug": "refactoring"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 66,
        "copies": 354
      },
      "_count": {
        "votes": 20,
        "copies": 379
      },
      "difficulty": "ADVANCED",
      "lastUpdated": "2024-12-01",
      "featured": false
    },
    {
      "id": "system-troubleshooter",
      "title": "System Debugging & Troubleshooting Expert",
      "slug": "system-troubleshooter",
      "tagline": "Expert debugging & troubleshooting prompt template",
      "description": "Advanced prompt for systematic debugging, performance analysis, and issue resolution across the full stack.",
      "categoryId": "prompt-templates",
      "category": {
        "id": "prompt-templates",
        "name": "Prompt Templates",
        "slug": "prompts",
        "description": "Carefully crafted prompt templates for common development tasks and workflows.",
        "icon": "💬",
        "color": "#10B981"
      },
      "type": "PROMPT_TEMPLATE",
      "content": "You are a senior systems engineer and debugging expert with extensive experience in troubleshooting complex distributed systems, performance issues, and production incidents.\n\n## Issue Context\n**System Type:** {{SYSTEM_TYPE}}\n**Environment:** {{ENVIRONMENT}}\n**Urgency Level:** {{URGENCY_LEVEL}}\n**Impact Scope:** {{IMPACT_SCOPE}}\n**Available Resources:** {{AVAILABLE_RESOURCES}}\n\n## Problem Description\n{{PROBLEM_DESCRIPTION}}\n\n## Symptoms & Observations\n{{SYMPTOMS}}\n\n## Recent Changes\n{{RECENT_CHANGES}}\n\n## Conduct systematic troubleshooting with the following approach:\n\n### 1. Problem Analysis & Hypothesis Formation\n- Analyze the symptoms and error patterns\n- Form initial hypotheses about root causes\n- Prioritize hypotheses by likelihood and impact\n- Identify critical information gaps\n- Define success criteria for resolution\n\n### 2. Information Gathering Strategy\n- Identify key logs, metrics, and monitoring data to examine\n- Plan diagnostic commands and tools to use\n- Determine if additional monitoring is needed\n- Identify stakeholders and subject matter experts\n- Plan for data collection without service disruption\n\n### 3. Systematic Investigation Plan\n- Design step-by-step investigation procedure\n- Plan hypothesis testing methodology\n- Identify potential investigation tools and techniques\n- Plan for safe testing and validation\n- Design rollback procedures if needed\n\n### 4. Root Cause Analysis\n- Apply systematic debugging methodologies\n- Use divide-and-conquer approach for complex systems\n- Analyze timing, dependencies, and system interactions\n- Consider infrastructure, application, and data layers\n- Document findings and evidence\n\n### 5. Solution Development\n- Design multiple solution approaches\n- Assess solution risks and trade-offs\n- Plan implementation steps and validation\n- Design monitoring for solution effectiveness\n- Plan for prevention of recurrence\n\n### 6. Performance Analysis (if applicable)\n- Analyze system performance metrics\n- Identify bottlenecks and resource constraints\n- Review scalability and capacity issues\n- Analyze user experience impact\n- Recommend performance optimizations\n\n### 7. Security Considerations\n- Check for security-related causes\n- Analyze potential security implications\n- Review access logs and authentication issues\n- Check for data breach or compromise indicators\n- Recommend security improvements\n\n### 8. Communication & Documentation\n- Plan stakeholder communication strategy\n- Document investigation findings\n- Create incident timeline and impact assessment\n- Plan for post-incident review\n- Document lessons learned and improvements\n\n## Output Format:\nProvide a comprehensive troubleshooting plan with:\n\n**Immediate Actions** (First 15 minutes):\n1. Critical checks to perform immediately\n2. Data to collect for triage\n3. Immediate mitigation steps if available\n\n**Investigation Plan:**\n\n**Phase 1: Information Gathering**\n```bash\n# Example diagnostic commands\ntail -f /var/log/application.log\ntop -p $(pgrep app_process)\nnetstat -tulpn | grep :8080\n```\n\n**Phase 2: Hypothesis Testing**\n- Hypothesis 1: [Description]\n  - Test: [How to validate]\n  - Expected result: [What indicates this cause]\n- Hypothesis 2: [Description]\n  - Test: [How to validate]\n  - Expected result: [What indicates this cause]\n\n**Phase 3: Root Cause Analysis**\n- Analysis methodology\n- Key areas to investigate\n- Tools and techniques to use\n\n**Diagnostic Checklist:**\n- [ ] Application logs reviewed\n- [ ] System resources checked (CPU, memory, disk)\n- [ ] Network connectivity verified\n- [ ] Database performance analyzed\n- [ ] Recent deployments reviewed\n- [ ] External dependencies checked\n\n**Solution Recommendations:**\n1. **Short-term fixes** (immediate relief)\n2. **Medium-term solutions** (address root cause)\n3. **Long-term improvements** (prevent recurrence)\n\n**Risk Assessment:**\n- Impact of each solution approach\n- Potential side effects or complications\n- Rollback procedures and safety measures\n\n**Monitoring & Validation:**\n- Metrics to monitor solution effectiveness\n- Success criteria and key indicators\n- Timeline for improvement validation\n\n**Prevention Measures:**\n- Process improvements\n- Monitoring enhancements\n- Code or infrastructure changes\n- Training and documentation needs\n\nInclude specific commands, queries, and procedures tailored to the system type and issue.",
      "tags": [
        {
          "tag": {
            "id": "debugging",
            "name": "debugging",
            "slug": "debugging"
          }
        },
        {
          "tag": {
            "id": "troubleshooting",
            "name": "troubleshooting",
            "slug": "troubleshooting"
          }
        },
        {
          "tag": {
            "id": "performance",
            "name": "performance",
            "slug": "performance"
          }
        },
        {
          "tag": {
            "id": "monitoring",
            "name": "monitoring",
            "slug": "monitoring"
          }
        },
        {
          "tag": {
            "id": "incident-response",
            "name": "incident-response",
            "slug": "incident-response"
          }
        }
      ],
      "author": {
        "name": "Claude Code Community",
        "url": "https://github.com/claudecode-community"
      },
      "stats": {
        "votes": 89,
        "copies": 294
      },
      "_count": {
        "votes": 59,
        "copies": 362
      },
      "difficulty": "ADVANCED",
      "lastUpdated": "2024-12-01",
      "featured": true
    }
  ],
  "meta": {
    "total": 6,
    "type": "PROMPT_TEMPLATE",
    "generated_at": "2025-07-30T20:50:57.033Z"
  }
}